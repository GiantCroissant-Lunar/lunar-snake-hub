name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  # === Pre-commit Checks ===
  pre-commit:
    name: Pre-commit Hooks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install pre-commit
      run: pip install pre-commit

    - name: Run pre-commit
      run: pre-commit run --all-files --show-diff-on-failure

  # === Validate Hub Structure ===
  validate:
    name: Validate Hub Structure
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Task
      uses: arduino/setup-task@v1
      with:
        version: 3.x

    - name: Validate structure
      run: task validate:all

  # === Test Hub Sync (Dogfooding) ===
  test-sync:
    name: Test Hub Sync
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Task
      uses: arduino/setup-task@v1
      with:
        version: 3.x

    - name: Test sync mechanism
      run: |
        task hub:clean
        task hub:sync
        task hub:check

    - name: Verify agent rules synced
      run: |
        if [ ! -d .hub-cache/agents/rules ]; then
          echo "❌ Agent rules not synced"
          exit 1
        fi
        echo "✅ Agent rules synced successfully"

  # === Lint Markdown ===
  lint-markdown:
    name: Lint Markdown
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install markdownlint
      run: npm install -g markdownlint-cli

    - name: Lint Markdown files
      run: markdownlint "**/*.md" --ignore node_modules --ignore .hub-cache

  # === Check Documentation ===
  check-docs:
    name: Check Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check README exists
      run: |
        if [ ! -f README.md ]; then
          echo "❌ README.md missing"
          exit 1
        fi
        echo "✅ README.md exists"

    - name: Check required documentation
      run: |
        REQUIRED_DOCS=(
          "docs/architecture/ARCHITECTURE_DISCUSSION.md"
          "docs/architecture/ARCHITECTURE_QUICK_REF.md"
          "docs/guides/PHASE1_CHECKLIST.md"
          "agents/README.md"
        )
        MISSING=0
        for doc in "${REQUIRED_DOCS[@]}"; do
          if [ ! -f "$doc" ]; then
            echo "❌ Missing: $doc"
            MISSING=$((MISSING + 1))
          else
            echo "✅ Found: $doc"
          fi
        done
        if [ $MISSING -gt 0 ]; then
          echo "❌ $MISSING required documentation file(s) missing"
          exit 1
        fi
        echo "✅ All required documentation present"

  # === Security Checks ===
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for hardcoded secrets
      run: |
        # Check for potential API keys or secrets (excluding encrypted files)
        if grep -r -E "(api_key|password|secret|token)\s*=\s*['\"][^'\"]{20,}" \
          --exclude-dir=.git \
          --exclude-dir=.hub-cache \
          --exclude="*.enc.yaml" \
          --exclude=".sops.yaml" \
          . ; then
          echo "❌ Potential hardcoded secrets found!"
          exit 1
        fi
        echo "✅ No hardcoded secrets detected"

    - name: Verify SOPS encrypted files
      run: |
        if [ -d infra/secrets ]; then
          PLAINTEXT=$(find infra/secrets -name "*.yaml" -not -name "*.enc.yaml" | wc -l)
          if [ $PLAINTEXT -gt 0 ]; then
            echo "❌ Unencrypted YAML files found in infra/secrets/"
            find infra/secrets -name "*.yaml" -not -name "*.enc.yaml"
            exit 1
          fi
        fi
        echo "✅ All secrets properly encrypted"

  # === Summary ===
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [pre-commit, validate, test-sync, lint-markdown, check-docs, security]
    if: always()
    steps:
    - name: Check all jobs passed
      run: |
        if [[ "${{ needs.pre-commit.result }}" != "success" ]] || \
           [[ "${{ needs.validate.result }}" != "success" ]] || \
           [[ "${{ needs.test-sync.result }}" != "success" ]] || \
           [[ "${{ needs.lint-markdown.result }}" != "success" ]] || \
           [[ "${{ needs.check-docs.result }}" != "success" ]] || \
           [[ "${{ needs.security.result }}" != "success" ]]; then
          echo "❌ Some CI checks failed"
          exit 1
        fi
        echo "✅ All CI checks passed!"
