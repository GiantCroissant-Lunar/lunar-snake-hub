# Convert config.json + secrets.json to Docker Compose .env file
# Usage: .\json-to-env.ps1 [-Encrypted]

param(
    [switch]$Encrypted
)

$ErrorActionPreference = "Stop"

# Load config.json (plain configuration)
Write-Host "üìã Loading config.json..."
if (-not (Test-Path "config.json")) {
    Write-Error "‚ùå config.json not found. Copy from config.template.json and customize."
    exit 1
}
$config = Get-Content "config.json" | ConvertFrom-Json

# Load secrets (encrypted or plain)
if ($Encrypted) {
    Write-Host "üîì Decrypting secrets.enc.json..."

    # Verify project-scoped age key exists
    $projectRoot = (Get-Item $PSScriptRoot).Parent.Parent.FullName
    $keyFile = Join-Path $projectRoot ".sops\age.key"

    if (-not (Test-Path $keyFile)) {
        Write-Error "‚ùå Age key not found at: $keyFile"
        exit 1
    }

    # No need to set env var - .sops.yaml references key file directly

    # Decrypt secrets from repo root
    $originalLocation = Get-Location
    try {
        Set-Location "../.."
        if (-not (Test-Path ".sops.yaml")) {
            throw ".sops.yaml not found in repo root"
        }
        # Decrypt directly to string, avoiding file encoding issues
        $decryptedJson = sops decrypt "infra\secrets\secrets.enc.json"
        $secrets = $decryptedJson | ConvertFrom-Json
    } finally {
        Set-Location $originalLocation
    }
} else {
    Write-Host "üìã Loading secrets.json..."
    if (-not (Test-Path "secrets.json")) {
        Write-Error "‚ùå secrets.json not found. Copy from secrets.template.json and fill in values."
        exit 1
    }
    $secrets = Get-Content "secrets.json" | ConvertFrom-Json
}

# Output .env file path
$envFile = "..\docker\.env"

Write-Host "üìù Generating .env file..."

# Generate .env content by merging config + secrets
$envContent = @"
# Generated from config.json + secrets.json
# DO NOT EDIT THIS FILE DIRECTLY - Edit source JSON files instead

# GLM-4.6 API Configuration
OPENAI_API_KEY=$($secrets.GLM.ApiKey)
OPENAI_BASE_URL=$($config.GLM.BaseURL)

# Gateway Authentication
GATEWAY_TOKEN=$($secrets.Services.Gateway.Token)

# n8n Configuration
N8N_USER=$($config.Services.N8n.User)
N8N_PASSWORD=$($secrets.Services.N8n.Password)

# Optional: Model Configuration
# MODEL=$($config.GLM.Model)
# EMBEDDING_MODEL=$($config.GLM.EmbeddingModel)
"@

# Write .env file
$envContent | Out-File -Encoding utf8 $envFile

Write-Host "‚úÖ Generated: $envFile"
Write-Host ""
Write-Host "üê≥ You can now run Docker Compose:"
Write-Host "  cd ..\docker"
Write-Host "  docker compose up -d"
