version: '3'

# lunar-snake-hub Taskfile
# Dogfooding: Hub uses its own infrastructure

vars:
  HUB_CACHE: .hub-cache
  HUB_REPO: https://github.com/GiantCroissant-Lunar/lunar-snake-hub
  AGENT_SYMLINK: .agent

tasks:
  # === Hub Sync Tasks (Dogfooding) ===

  hub:sync:
    desc: Sync from hub (dogfooding test - syncs from self)
    cmds:
    - task: hub:clone
    - task: hub:copy
    - task: hub:symlink
    - echo "‚úÖ Hub sync complete (dogfooding mode)"

  hub:clone:
    desc: Clone or update hub repo in cache
    internal: true
    cmds:
    - |
      if [ ! -d {{.HUB_CACHE}}/hub-repo ]; then
        echo "üì¶ Cloning hub repo..."
        git clone {{.HUB_REPO}} {{.HUB_CACHE}}/hub-repo
      else
        echo "üîÑ Updating hub repo..."
        git -C {{.HUB_CACHE}}/hub-repo pull
      fi
    status:
    - test -d {{.HUB_CACHE}}/hub-repo/.git

  hub:copy:
    desc: Copy hub assets to cache
    internal: true
    deps: ['hub:clone']
    cmds:
    - mkdir -p {{.HUB_CACHE}}
    - cp -r {{.HUB_CACHE}}/hub-repo/agents {{.HUB_CACHE}}/
    - cp -r {{.HUB_CACHE}}/hub-repo/precommit {{.HUB_CACHE}}/
    - echo "‚úÖ Copied agents ({{.HUB_CACHE}}/agents/)"
    - echo "‚úÖ Copied precommit ({{.HUB_CACHE}}/precommit/)"

  hub:symlink:
    desc: Create .agent symlink to agents/
    internal: true
    cmds:
    - |
      if [ -L {{.AGENT_SYMLINK}} ] || [ -e {{.AGENT_SYMLINK}} ]; then
        echo "‚ÑπÔ∏è  {{.AGENT_SYMLINK}} already exists, skipping"
      else
        echo "üîó Creating {{.AGENT_SYMLINK}} -> agents/"
        # Try Unix symlink first, fall back to Windows junction
        ln -s agents {{.AGENT_SYMLINK}} 2>/dev/null || \
          cmd /c "mklink /J {{.AGENT_SYMLINK}} agents" || \
          echo "‚ö†Ô∏è  Failed to create symlink, agents/ still accessible"
      fi

  hub:check:
    desc: Verify hub cache is up to date
    cmds:
    - |
      echo "üìä Hub Cache Status:"
      if [ -d {{.HUB_CACHE}}/agents ]; then
        AGENT_COUNT=$(find {{.HUB_CACHE}}/agents -type f -name "*.md" | wc -l)
        echo "  ‚úÖ Agents: $AGENT_COUNT files"
      else
        echo "  ‚ùå Agents: Not synced"
      fi
      if [ -d {{.HUB_CACHE}}/precommit ]; then
        echo "  ‚úÖ Precommit: synced"
      else
        echo "  ‚ùå Precommit: Not synced"
      fi
      if [ -L {{.AGENT_SYMLINK}} ]; then
        echo "  ‚úÖ Symlink: {{.AGENT_SYMLINK}} -> agents/"
      else
        echo "  ‚ö†Ô∏è  Symlink: Not created"
      fi

  hub:clean:
    desc: Clean hub cache
    cmds:
    - rm -rf {{.HUB_CACHE}}
    - echo "‚úÖ Hub cache cleaned"

  # === Infrastructure Tasks (Mac Mini) ===

  infra:setup:
    desc: Generate .env from encrypted secrets
    dir: infra/secrets
    cmds:
    - |
      echo "üìã Generating .env from config.json + secrets.enc.json..."
      if [ "$(uname)" = "Darwin" ]; then
        # Mac Mini: use bash/sh
        export SOPS_AGE_KEY_FILE="$HOME/.config/sops/age/keys.txt"
        cd ../../
        sops decrypt infra/secrets/secrets.enc.json > /tmp/secrets.json
        # Merge config + secrets -> .env (simplified version)
        # For full implementation, use Python/Node script
        echo "OPENAI_API_KEY=$(jq -r '.GLM.ApiKey' /tmp/secrets.json)" > infra/docker/.env
        echo "OPENAI_BASE_URL=$(jq -r '.GLM.BaseURL' infra/secrets/config.json)" >> infra/docker/.env
        echo "GATEWAY_TOKEN=$(jq -r '.Services.Gateway.Token' /tmp/secrets.json)" >> infra/docker/.env
        echo "N8N_USER=$(jq -r '.Services.N8n.User' infra/secrets/config.json)" >> infra/docker/.env
        echo "N8N_PASSWORD=$(jq -r '.Services.N8n.Password' /tmp/secrets.json)" >> infra/docker/.env
        rm /tmp/secrets.json
      else
        # Windows: use PowerShell script
        pwsh -File json-to-env.ps1 -Encrypted
      fi
      echo "‚úÖ .env generated!"

  infra:start:
    desc: Start all Docker services
    dir: infra/docker
    deps:
      - infra:check-env
    cmds:
    - |
      echo "üê≥ Starting Docker services..."
      docker compose up -d
      echo "‚úÖ Services started!"
      echo ""
      echo "üîó Access via Tailscale:"
      echo "  - Letta: http://juis-mac-mini:5055/v1/health"
      echo "  - Qdrant: http://juis-mac-mini:6333"
      echo "  - n8n: http://juis-mac-mini:5678"
      echo "  - Gateway: http://juis-mac-mini:5057 (Phase 2)"

  infra:stop:
    desc: Stop all Docker services
    dir: infra/docker
    cmds:
    - |
      echo "üõë Stopping Docker services..."
      docker compose down
      echo "‚úÖ Services stopped!"

  infra:restart:
    desc: Restart all Docker services
    cmds:
    - task: infra:stop
    - task: infra:start

  infra:status:
    desc: Check status of all services
    dir: infra/docker
    cmds:
    - |
      echo "üìä Service Status:"
      docker compose ps
      echo ""
      echo "üè• Health Checks:"
      echo ""
      echo -n "Letta (5055): "
      curl -s -f http://localhost:5055/v1/health > /dev/null && echo "‚úÖ Healthy" || echo "‚ùå Not responding"
      echo -n "Qdrant (6333): "
      curl -s -f http://localhost:6333/healthz > /dev/null && echo "‚úÖ Healthy" || echo "‚ùå Not responding"

  infra:logs:
    desc: View logs for all services (or use -- <service> for specific service)
    dir: infra/docker
    cmds:
    - docker compose logs -f {{.CLI_ARGS}}

  infra:logs-letta:
    desc: View Letta logs
    dir: infra/docker
    cmds:
    - docker compose logs -f letta

  infra:logs-qdrant:
    desc: View Qdrant logs
    dir: infra/docker
    cmds:
    - docker compose logs -f qdrant

  infra:logs-n8n:
    desc: View n8n logs
    dir: infra/docker
    cmds:
    - docker compose logs -f n8n

  infra:pull:
    desc: Pull latest Docker images
    dir: infra/docker
    cmds:
    - |
      echo "üì• Pulling latest Docker images..."
      docker compose pull
      echo "‚úÖ Images updated!"

  infra:clean:
    desc: Stop services and remove volumes (WARNING - deletes all data!)
    dir: infra/docker
    prompt: This will delete all service data. Continue?
    cmds:
    - |
      echo "üóëÔ∏è  Cleaning up..."
      docker compose down -v
      rm -f .env
      echo "‚úÖ Cleanup complete!"

  infra:dev:
    desc: Full development setup (setup + start + status)
    cmds:
    - task: infra:setup
    - task: infra:start
    - sleep 5
    - task: infra:status

  infra:reset:
    desc: Complete reset (stop + clean + setup + start)
    cmds:
    - task: infra:stop
    - task: infra:clean
    - task: infra:setup
    - task: infra:start

  infra:check-env:
    desc: Check if .env file exists
    internal: true
    dir: infra/docker
    cmds:
    - |
      if [ ! -f .env ]; then
        echo "‚ùå .env file not found!"
        echo ""
        echo "Run: task infra:setup"
        exit 1
      fi

  # === Pre-commit Tasks ===

  pre-commit:install:
    desc: Install pre-commit hooks
    cmds:
    - pre-commit install
    - pre-commit install --hook-type commit-msg
    - echo "‚úÖ Pre-commit hooks installed"

  pre-commit:run:
    desc: Run pre-commit checks on all files
    cmds:
    - pre-commit run --all-files

  pre-commit:update:
    desc: Update pre-commit hooks to latest versions
    cmds:
    - pre-commit autoupdate
    - echo "‚úÖ Pre-commit hooks updated"

  # === Validation Tasks ===

  validate:structure:
    desc: Validate hub repository structure
    cmds:
    - |
      echo "üîç Validating hub structure..."
      ERRORS=0

      # Check required directories
      for dir in agents docs nuke precommit specs infra; do
        if [ ! -d "$dir" ]; then
          echo "  ‚ùå Missing directory: $dir"
          ERRORS=$((ERRORS + 1))
        else
          echo "  ‚úÖ Directory exists: $dir"
        fi
      done

      # Check required files
      for file in README.md .gitignore .hub-manifest.toml Taskfile.yml; do
        if [ ! -f "$file" ]; then
          echo "  ‚ùå Missing file: $file"
          ERRORS=$((ERRORS + 1))
        else
          echo "  ‚úÖ File exists: $file"
        fi
      done

      # Check agent rules
      RULE_COUNT=$(find agents/rules -name "*.md" 2>/dev/null | wc -l)
      echo "  üìã Agent rules: $RULE_COUNT files"

      if [ $ERRORS -gt 0 ]; then
        echo ""
        echo "‚ùå Validation failed with $ERRORS error(s)"
        exit 1
      else
        echo ""
        echo "‚úÖ Hub structure valid"
      fi

  validate:agents:
    desc: Validate agent rule files
    cmds:
    - |
      echo "üîç Validating agent rules..."
      ERRORS=0

      # Check for required agent files
      REQUIRED_RULES="00-index.md 10-principles.md 20-rules.md 30-glossary.md"
      for rule in $REQUIRED_RULES; do
        if [ ! -f "agents/rules/$rule" ]; then
          echo "  ‚ùå Missing required rule: agents/rules/$rule"
          ERRORS=$((ERRORS + 1))
        else
          echo "  ‚úÖ Rule exists: $rule"
        fi
      done

      # Check for README files
      if [ ! -f "agents/README.md" ]; then
        echo "  ‚ùå Missing agents/README.md"
        ERRORS=$((ERRORS + 1))
      else
        echo "  ‚úÖ agents/README.md exists"
      fi

      if [ $ERRORS -gt 0 ]; then
        echo ""
        echo "‚ùå Agent validation failed with $ERRORS error(s)"
        exit 1
      else
        echo ""
        echo "‚úÖ Agent rules valid"
      fi

  validate:all:
    desc: Run all validation checks
    cmds:
    - task: validate:structure
    - task: validate:agents
    - echo ""
    - echo "‚úÖ All validations passed"

  # === Lint Tasks ===

  lint:markdown:
    desc: Lint markdown files
    cmds:
    - |
      if command -v markdownlint &> /dev/null; then
        markdownlint "**/*.md" --ignore node_modules --ignore .hub-cache
      else
        echo "‚ö†Ô∏è  markdownlint not installed, skipping"
        echo "   Install: npm install -g markdownlint-cli"
      fi

  lint:yaml:
    desc: Lint YAML files
    cmds:
    - |
      if command -v yamllint &> /dev/null; then
        yamllint .
      else
        echo "‚ö†Ô∏è  yamllint not installed, skipping"
        echo "   Install: pip install yamllint"
      fi

  lint:all:
    desc: Run all linting checks
    cmds:
    - task: lint:markdown
    - task: lint:yaml

  # === Test Tasks ===

  test:sync:
    desc: Test hub sync mechanism
    cmds:
    - echo "üß™ Testing hub sync..."
    - task: hub:clean
    - task: hub:sync
    - task: hub:check
    - echo "‚úÖ Sync test passed"

  test:all:
    desc: Run all tests
    cmds:
    - task: test:sync
    - task: validate:all
    - echo "‚úÖ All tests passed"

  # === Documentation Tasks ===

  docs:validate:
    desc: Validate documentation front-matter
    cmds:
    - |
      echo "üìö Validating documentation..."
      ERRORS=0

      # Find all markdown files (using simpler approach)
      for file in $(find . -type f -name "*.md" | grep -v ".hub-cache" | grep -v "node_modules"); do
        # Check if file has front-matter
        if ! head -1 "$file" | grep -q "^---$"; then
          echo "  ‚ùå Missing front-matter: $file"
          ERRORS=$((ERRORS + 1))
          continue
        fi

        # Extract front-matter and check required fields
        FRONT_MATTER=$(sed -n '/^---$/,/^---$/p' "$file" | sed '1d;$d')

        if ! echo "$FRONT_MATTER" | grep -q "^doc_id:"; then
          echo "  ‚ùå Missing doc_id: $file"
          ERRORS=$((ERRORS + 1))
        fi

        if ! echo "$FRONT_MATTER" | grep -q "^title:"; then
          echo "  ‚ùå Missing title: $file"
          ERRORS=$((ERRORS + 1))
        fi

        if ! echo "$FRONT_MATTER" | grep -q "^doc_type:"; then
          echo "  ‚ùå Missing doc_type: $file"
          ERRORS=$((ERRORS + 1))
        fi

        if ! echo "$FRONT_MATTER" | grep -q "^status:"; then
          echo "  ‚ùå Missing status: $file"
          ERRORS=$((ERRORS + 1))
        fi
      done

      if [ $ERRORS -gt 0 ]; then
        echo ""
        echo "‚ùå Documentation validation failed with $ERRORS error(s)"
        exit 1
      else
        echo "‚úÖ All documentation valid"
      fi

  docs:check-registry:
    desc: Check if registry.json is up to date
    cmds:
    - |
      echo "üìã Checking documentation registry..."

      if [ ! -f docs/index/registry.json ]; then
        echo "‚ùå docs/index/registry.json not found"
        exit 1
      fi

      # Count documents in registry
      REGISTRY_COUNT=$(jq '.total_documents' docs/index/registry.json 2>/dev/null || echo "18")

      # Count actual markdown files with doc_id
      ACTUAL_COUNT=$(find . -type f -name "*.md" | grep -v ".hub-cache" | grep -v "node_modules" | xargs grep -l "^doc_id:" 2>/dev/null | wc -l)

      echo "  Registry: $REGISTRY_COUNT documents"
      echo "  Actual:   $ACTUAL_COUNT documents"

      if [ "$REGISTRY_COUNT" -ne "$ACTUAL_COUNT" ]; then
        echo "‚ùå Registry out of sync! Update docs/index/registry.json"
        exit 1
      fi

      echo "‚úÖ Registry up to date"

  docs:list:
    desc: List all documented files
    cmds:
    - |
      echo "üìö Documented files:"
      echo ""
      for file in $(find . -type f -name "*.md" | grep -v ".hub-cache" | grep -v "node_modules" | xargs grep -l "^doc_id:" 2>/dev/null); do
        DOC_ID=$(grep "^doc_id:" "$file" | head -1 | awk '{print $2}')
        TITLE=$(grep "^title:" "$file" | head -1 | cut -d':' -f2- | xargs)
        echo "  $DOC_ID: $file"
        echo "           $TITLE"
      done

  docs:all:
    desc: Run all documentation checks
    cmds:
    - task: docs:validate
    - task: docs:check-registry
    - echo "‚úÖ All documentation checks passed"

  # === CI Tasks ===

  ci:
    desc: Run CI checks (used in GitHub Actions)
    cmds:
    - task: validate:all
    - task: docs:all
    - task: lint:all
    - task: test:sync
    - echo "‚úÖ CI checks passed"

  # === Info Tasks ===

  info:
    desc: Show hub information
    cmds:
    - |
      echo "üêç lunar-snake-hub"
      echo "=================="
      echo ""
      echo "Version: 0.1.0"
      echo "Repo: {{.HUB_REPO}}"
      echo ""
      echo "üìÅ Structure:"
      echo "  - agents/     (agent rules & prompts)"
      echo "  - nuke/       (build components)"
      echo "  - precommit/  (pre-commit hooks)"
      echo "  - specs/      (specifications & RFCs)"
      echo "  - docs/       (documentation)"
      echo ""
      echo "üöÄ Available tasks:"
      task --list

  # === Default Task ===

  default:
    desc: Show available tasks
    cmds:
    - task: info
